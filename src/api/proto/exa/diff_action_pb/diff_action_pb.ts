// Copyright Exafunction, Inc.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file exa/diff_action_pb/diff_action.proto (package exa.diff_action_pb, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Language } from "../codeium_common_pb/codeium_common_pb.js";

/**
 * @generated from enum exa.diff_action_pb.UnifiedDiffLineType
 */
export enum UnifiedDiffLineType {
  /**
   * @generated from enum value: UNIFIED_DIFF_LINE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: UNIFIED_DIFF_LINE_TYPE_INSERT = 1;
   */
  INSERT = 1,

  /**
   * @generated from enum value: UNIFIED_DIFF_LINE_TYPE_DELETE = 2;
   */
  DELETE = 2,

  /**
   * @generated from enum value: UNIFIED_DIFF_LINE_TYPE_UNCHANGED = 3;
   */
  UNCHANGED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(UnifiedDiffLineType)
proto3.util.setEnumType(UnifiedDiffLineType, "exa.diff_action_pb.UnifiedDiffLineType", [
  { no: 0, name: "UNIFIED_DIFF_LINE_TYPE_UNSPECIFIED" },
  { no: 1, name: "UNIFIED_DIFF_LINE_TYPE_INSERT" },
  { no: 2, name: "UNIFIED_DIFF_LINE_TYPE_DELETE" },
  { no: 3, name: "UNIFIED_DIFF_LINE_TYPE_UNCHANGED" },
]);

/**
 * @generated from message exa.diff_action_pb.UnifiedDiff
 */
export class UnifiedDiff extends Message<UnifiedDiff> {
  /**
   * @generated from field: repeated exa.diff_action_pb.UnifiedDiff.UnifiedDiffLine lines = 3;
   */
  lines: UnifiedDiff_UnifiedDiffLine[] = [];

  constructor(data?: PartialMessage<UnifiedDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.diff_action_pb.UnifiedDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "lines", kind: "message", T: UnifiedDiff_UnifiedDiffLine, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnifiedDiff {
    return new UnifiedDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnifiedDiff {
    return new UnifiedDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnifiedDiff {
    return new UnifiedDiff().fromJsonString(jsonString, options);
  }

  static equals(a: UnifiedDiff | PlainMessage<UnifiedDiff> | undefined, b: UnifiedDiff | PlainMessage<UnifiedDiff> | undefined): boolean {
    return proto3.util.equals(UnifiedDiff, a, b);
  }
}

/**
 * @generated from message exa.diff_action_pb.UnifiedDiff.UnifiedDiffLine
 */
export class UnifiedDiff_UnifiedDiffLine extends Message<UnifiedDiff_UnifiedDiffLine> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: exa.diff_action_pb.UnifiedDiffLineType type = 2;
   */
  type = UnifiedDiffLineType.UNSPECIFIED;

  constructor(data?: PartialMessage<UnifiedDiff_UnifiedDiffLine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.diff_action_pb.UnifiedDiff.UnifiedDiffLine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(UnifiedDiffLineType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnifiedDiff_UnifiedDiffLine {
    return new UnifiedDiff_UnifiedDiffLine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnifiedDiff_UnifiedDiffLine {
    return new UnifiedDiff_UnifiedDiffLine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnifiedDiff_UnifiedDiffLine {
    return new UnifiedDiff_UnifiedDiffLine().fromJsonString(jsonString, options);
  }

  static equals(a: UnifiedDiff_UnifiedDiffLine | PlainMessage<UnifiedDiff_UnifiedDiffLine> | undefined, b: UnifiedDiff_UnifiedDiffLine | PlainMessage<UnifiedDiff_UnifiedDiffLine> | undefined): boolean {
    return proto3.util.equals(UnifiedDiff_UnifiedDiffLine, a, b);
  }
}

/**
 * Proto representation of a code block.
 *
 * @generated from message exa.diff_action_pb.DiffBlock
 */
export class DiffBlock extends Message<DiffBlock> {
  /**
   * @generated from field: int32 start_line = 1;
   */
  startLine = 0;

  /**
   * @generated from field: int32 end_line = 2;
   */
  endLine = 0;

  /**
   * @generated from field: exa.diff_action_pb.UnifiedDiff unified_diff = 3;
   */
  unifiedDiff?: UnifiedDiff;

  /**
   * @generated from field: exa.codeium_common_pb.Language from_language = 4;
   */
  fromLanguage = Language.UNSPECIFIED;

  /**
   * @generated from field: exa.codeium_common_pb.Language to_language = 5;
   */
  toLanguage = Language.UNSPECIFIED;

  constructor(data?: PartialMessage<DiffBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.diff_action_pb.DiffBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "unified_diff", kind: "message", T: UnifiedDiff },
    { no: 4, name: "from_language", kind: "enum", T: proto3.getEnumType(Language) },
    { no: 5, name: "to_language", kind: "enum", T: proto3.getEnumType(Language) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiffBlock {
    return new DiffBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiffBlock {
    return new DiffBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiffBlock {
    return new DiffBlock().fromJsonString(jsonString, options);
  }

  static equals(a: DiffBlock | PlainMessage<DiffBlock> | undefined, b: DiffBlock | PlainMessage<DiffBlock> | undefined): boolean {
    return proto3.util.equals(DiffBlock, a, b);
  }
}

