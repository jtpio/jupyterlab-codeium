// Copyright Exafunction, Inc.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file exa/chat_pb/chat.proto (package exa.chat_pb, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { ChatMessageSource, CodeContextItem, FunctionInfo, Language } from "../codeium_common_pb/codeium_common_pb.js";
import { DiffBlock } from "../diff_action_pb/diff_action_pb.js";

/**
 * buf:lint:ignore ENUM_VALUE_PREFIX
 *
 * @generated from enum exa.chat_pb.ChatFeedbackType
 */
export enum ChatFeedbackType {
  /**
   * @generated from enum value: FEEDBACK_TYPE_UNSPECIFIED = 0;
   */
  FEEDBACK_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: FEEDBACK_TYPE_ACCEPT = 1;
   */
  FEEDBACK_TYPE_ACCEPT = 1,

  /**
   * @generated from enum value: FEEDBACK_TYPE_REJECT = 2;
   */
  FEEDBACK_TYPE_REJECT = 2,

  /**
   * Not explicit accept/reject, but the user copied some piece of Codeium-generated content.
   *
   * @generated from enum value: FEEDBACK_TYPE_COPIED = 3;
   */
  FEEDBACK_TYPE_COPIED = 3,

  /**
   * Diff block actions.
   *
   * @generated from enum value: FEEDBACK_TYPE_ACCEPT_DIFF = 4;
   */
  FEEDBACK_TYPE_ACCEPT_DIFF = 4,

  /**
   * @generated from enum value: FEEDBACK_TYPE_REJECT_DIFF = 5;
   */
  FEEDBACK_TYPE_REJECT_DIFF = 5,

  /**
   * @generated from enum value: FEEDBACK_TYPE_APPLY_DIFF = 6;
   */
  FEEDBACK_TYPE_APPLY_DIFF = 6,

  /**
   * @generated from enum value: FEEDBACK_TYPE_INSERT_AT_CURSOR = 7;
   */
  FEEDBACK_TYPE_INSERT_AT_CURSOR = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(ChatFeedbackType)
proto3.util.setEnumType(ChatFeedbackType, "exa.chat_pb.ChatFeedbackType", [
  { no: 0, name: "FEEDBACK_TYPE_UNSPECIFIED" },
  { no: 1, name: "FEEDBACK_TYPE_ACCEPT" },
  { no: 2, name: "FEEDBACK_TYPE_REJECT" },
  { no: 3, name: "FEEDBACK_TYPE_COPIED" },
  { no: 4, name: "FEEDBACK_TYPE_ACCEPT_DIFF" },
  { no: 5, name: "FEEDBACK_TYPE_REJECT_DIFF" },
  { no: 6, name: "FEEDBACK_TYPE_APPLY_DIFF" },
  { no: 7, name: "FEEDBACK_TYPE_INSERT_AT_CURSOR" },
]);

/**
 * Proto representation of a code block.
 *
 * @generated from message exa.chat_pb.CodeBlockInfo
 */
export class CodeBlockInfo extends Message<CodeBlockInfo> {
  /**
   * @generated from field: string raw_source = 1;
   */
  rawSource = "";

  /**
   * Start position of the code block.
   *
   * @generated from field: int32 start_line = 2;
   */
  startLine = 0;

  /**
   * @generated from field: int32 start_col = 3;
   */
  startCol = 0;

  /**
   * End position of the code block.
   *
   * @generated from field: int32 end_line = 4;
   */
  endLine = 0;

  /**
   * @generated from field: int32 end_col = 5;
   */
  endCol = 0;

  constructor(data?: PartialMessage<CodeBlockInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.CodeBlockInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "raw_source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "start_col", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "end_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "end_col", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeBlockInfo {
    return new CodeBlockInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeBlockInfo {
    return new CodeBlockInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeBlockInfo {
    return new CodeBlockInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CodeBlockInfo | PlainMessage<CodeBlockInfo> | undefined, b: CodeBlockInfo | PlainMessage<CodeBlockInfo> | undefined): boolean {
    return proto3.util.equals(CodeBlockInfo, a, b);
  }
}

/**
 * A generic text message with no structured data from the user to the bot.
 *
 * @generated from message exa.chat_pb.IntentGeneric
 */
export class IntentGeneric extends Message<IntentGeneric> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<IntentGeneric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.IntentGeneric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentGeneric {
    return new IntentGeneric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentGeneric {
    return new IntentGeneric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentGeneric {
    return new IntentGeneric().fromJsonString(jsonString, options);
  }

  static equals(a: IntentGeneric | PlainMessage<IntentGeneric> | undefined, b: IntentGeneric | PlainMessage<IntentGeneric> | undefined): boolean {
    return proto3.util.equals(IntentGeneric, a, b);
  }
}

/**
 * Ask for an explanation for a function.
 *
 * @generated from message exa.chat_pb.IntentFunctionExplain
 */
export class IntentFunctionExplain extends Message<IntentFunctionExplain> {
  /**
   * @generated from field: exa.codeium_common_pb.FunctionInfo function_info = 1;
   */
  functionInfo?: FunctionInfo;

  /**
   * @generated from field: exa.codeium_common_pb.Language language = 2;
   */
  language = Language.UNSPECIFIED;

  /**
   * @generated from field: string file_path = 3;
   */
  filePath = "";

  constructor(data?: PartialMessage<IntentFunctionExplain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.IntentFunctionExplain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "function_info", kind: "message", T: FunctionInfo },
    { no: 2, name: "language", kind: "enum", T: proto3.getEnumType(Language) },
    { no: 3, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentFunctionExplain {
    return new IntentFunctionExplain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentFunctionExplain {
    return new IntentFunctionExplain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentFunctionExplain {
    return new IntentFunctionExplain().fromJsonString(jsonString, options);
  }

  static equals(a: IntentFunctionExplain | PlainMessage<IntentFunctionExplain> | undefined, b: IntentFunctionExplain | PlainMessage<IntentFunctionExplain> | undefined): boolean {
    return proto3.util.equals(IntentFunctionExplain, a, b);
  }
}

/**
 * Ask to refactor a function.
 *
 * @generated from message exa.chat_pb.IntentFunctionRefactor
 */
export class IntentFunctionRefactor extends Message<IntentFunctionRefactor> {
  /**
   * @generated from field: exa.codeium_common_pb.FunctionInfo function_info = 1;
   */
  functionInfo?: FunctionInfo;

  /**
   * @generated from field: exa.codeium_common_pb.Language language = 2;
   */
  language = Language.UNSPECIFIED;

  /**
   * @generated from field: string file_path = 3;
   */
  filePath = "";

  /**
   * @generated from field: string refactor_description = 4;
   */
  refactorDescription = "";

  constructor(data?: PartialMessage<IntentFunctionRefactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.IntentFunctionRefactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "function_info", kind: "message", T: FunctionInfo },
    { no: 2, name: "language", kind: "enum", T: proto3.getEnumType(Language) },
    { no: 3, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "refactor_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentFunctionRefactor {
    return new IntentFunctionRefactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentFunctionRefactor {
    return new IntentFunctionRefactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentFunctionRefactor {
    return new IntentFunctionRefactor().fromJsonString(jsonString, options);
  }

  static equals(a: IntentFunctionRefactor | PlainMessage<IntentFunctionRefactor> | undefined, b: IntentFunctionRefactor | PlainMessage<IntentFunctionRefactor> | undefined): boolean {
    return proto3.util.equals(IntentFunctionRefactor, a, b);
  }
}

/**
 * Ask to generate unit tests for a function.
 *
 * @generated from message exa.chat_pb.IntentFunctionUnitTests
 */
export class IntentFunctionUnitTests extends Message<IntentFunctionUnitTests> {
  /**
   * @generated from field: exa.codeium_common_pb.FunctionInfo function_info = 1;
   */
  functionInfo?: FunctionInfo;

  /**
   * @generated from field: exa.codeium_common_pb.Language language = 2;
   */
  language = Language.UNSPECIFIED;

  /**
   * @generated from field: string file_path = 3;
   */
  filePath = "";

  /**
   * Optional additional instructions to inform what tests to generate.
   *
   * @generated from field: string instructions = 4;
   */
  instructions = "";

  constructor(data?: PartialMessage<IntentFunctionUnitTests>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.IntentFunctionUnitTests";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "function_info", kind: "message", T: FunctionInfo },
    { no: 2, name: "language", kind: "enum", T: proto3.getEnumType(Language) },
    { no: 3, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "instructions", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentFunctionUnitTests {
    return new IntentFunctionUnitTests().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentFunctionUnitTests {
    return new IntentFunctionUnitTests().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentFunctionUnitTests {
    return new IntentFunctionUnitTests().fromJsonString(jsonString, options);
  }

  static equals(a: IntentFunctionUnitTests | PlainMessage<IntentFunctionUnitTests> | undefined, b: IntentFunctionUnitTests | PlainMessage<IntentFunctionUnitTests> | undefined): boolean {
    return proto3.util.equals(IntentFunctionUnitTests, a, b);
  }
}

/**
 * Ask for a docstring for a function.
 *
 * @generated from message exa.chat_pb.IntentFunctionDocstring
 */
export class IntentFunctionDocstring extends Message<IntentFunctionDocstring> {
  /**
   * @generated from field: exa.codeium_common_pb.FunctionInfo function_info = 1;
   */
  functionInfo?: FunctionInfo;

  /**
   * @generated from field: exa.codeium_common_pb.Language language = 2;
   */
  language = Language.UNSPECIFIED;

  /**
   * @generated from field: string file_path = 3;
   */
  filePath = "";

  constructor(data?: PartialMessage<IntentFunctionDocstring>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.IntentFunctionDocstring";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "function_info", kind: "message", T: FunctionInfo },
    { no: 2, name: "language", kind: "enum", T: proto3.getEnumType(Language) },
    { no: 3, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentFunctionDocstring {
    return new IntentFunctionDocstring().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentFunctionDocstring {
    return new IntentFunctionDocstring().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentFunctionDocstring {
    return new IntentFunctionDocstring().fromJsonString(jsonString, options);
  }

  static equals(a: IntentFunctionDocstring | PlainMessage<IntentFunctionDocstring> | undefined, b: IntentFunctionDocstring | PlainMessage<IntentFunctionDocstring> | undefined): boolean {
    return proto3.util.equals(IntentFunctionDocstring, a, b);
  }
}

/**
 * Ask to explain a generic piece of code.
 *
 * @generated from message exa.chat_pb.IntentCodeBlockExplain
 */
export class IntentCodeBlockExplain extends Message<IntentCodeBlockExplain> {
  /**
   * @generated from field: exa.chat_pb.CodeBlockInfo code_block_info = 1;
   */
  codeBlockInfo?: CodeBlockInfo;

  /**
   * @generated from field: exa.codeium_common_pb.Language language = 2;
   */
  language = Language.UNSPECIFIED;

  /**
   * @generated from field: string file_path = 3;
   */
  filePath = "";

  constructor(data?: PartialMessage<IntentCodeBlockExplain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.IntentCodeBlockExplain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_block_info", kind: "message", T: CodeBlockInfo },
    { no: 2, name: "language", kind: "enum", T: proto3.getEnumType(Language) },
    { no: 3, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentCodeBlockExplain {
    return new IntentCodeBlockExplain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentCodeBlockExplain {
    return new IntentCodeBlockExplain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentCodeBlockExplain {
    return new IntentCodeBlockExplain().fromJsonString(jsonString, options);
  }

  static equals(a: IntentCodeBlockExplain | PlainMessage<IntentCodeBlockExplain> | undefined, b: IntentCodeBlockExplain | PlainMessage<IntentCodeBlockExplain> | undefined): boolean {
    return proto3.util.equals(IntentCodeBlockExplain, a, b);
  }
}

/**
 * Ask to refactor a generic piece of code.
 *
 * @generated from message exa.chat_pb.IntentCodeBlockRefactor
 */
export class IntentCodeBlockRefactor extends Message<IntentCodeBlockRefactor> {
  /**
   * @generated from field: exa.chat_pb.CodeBlockInfo code_block_info = 1;
   */
  codeBlockInfo?: CodeBlockInfo;

  /**
   * @generated from field: exa.codeium_common_pb.Language language = 2;
   */
  language = Language.UNSPECIFIED;

  /**
   * @generated from field: string file_path = 3;
   */
  filePath = "";

  /**
   * @generated from field: string refactor_description = 4;
   */
  refactorDescription = "";

  constructor(data?: PartialMessage<IntentCodeBlockRefactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.IntentCodeBlockRefactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_block_info", kind: "message", T: CodeBlockInfo },
    { no: 2, name: "language", kind: "enum", T: proto3.getEnumType(Language) },
    { no: 3, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "refactor_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentCodeBlockRefactor {
    return new IntentCodeBlockRefactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentCodeBlockRefactor {
    return new IntentCodeBlockRefactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentCodeBlockRefactor {
    return new IntentCodeBlockRefactor().fromJsonString(jsonString, options);
  }

  static equals(a: IntentCodeBlockRefactor | PlainMessage<IntentCodeBlockRefactor> | undefined, b: IntentCodeBlockRefactor | PlainMessage<IntentCodeBlockRefactor> | undefined): boolean {
    return proto3.util.equals(IntentCodeBlockRefactor, a, b);
  }
}

/**
 * Ask to explain a problem.
 *
 * @generated from message exa.chat_pb.IntentProblemExplain
 */
export class IntentProblemExplain extends Message<IntentProblemExplain> {
  /**
   * @generated from field: string diagnostic_message = 1;
   */
  diagnosticMessage = "";

  /**
   * entire code block with error
   *
   * @generated from field: exa.chat_pb.CodeBlockInfo problematic_code = 2;
   */
  problematicCode?: CodeBlockInfo;

  /**
   * @generated from field: string surrounding_code_snippet = 3;
   */
  surroundingCodeSnippet = "";

  /**
   * @generated from field: exa.codeium_common_pb.Language language = 4;
   */
  language = Language.UNSPECIFIED;

  /**
   * @generated from field: string file_path = 5;
   */
  filePath = "";

  /**
   * @generated from field: int32 line_number = 6;
   */
  lineNumber = 0;

  constructor(data?: PartialMessage<IntentProblemExplain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.IntentProblemExplain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "diagnostic_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "problematic_code", kind: "message", T: CodeBlockInfo },
    { no: 3, name: "surrounding_code_snippet", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "language", kind: "enum", T: proto3.getEnumType(Language) },
    { no: 5, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentProblemExplain {
    return new IntentProblemExplain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentProblemExplain {
    return new IntentProblemExplain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentProblemExplain {
    return new IntentProblemExplain().fromJsonString(jsonString, options);
  }

  static equals(a: IntentProblemExplain | PlainMessage<IntentProblemExplain> | undefined, b: IntentProblemExplain | PlainMessage<IntentProblemExplain> | undefined): boolean {
    return proto3.util.equals(IntentProblemExplain, a, b);
  }
}

/**
 * Ask to generate a piece of code.
 *
 * @generated from message exa.chat_pb.IntentGenerateCode
 */
export class IntentGenerateCode extends Message<IntentGenerateCode> {
  /**
   * @generated from field: string instruction = 1;
   */
  instruction = "";

  /**
   * @generated from field: exa.codeium_common_pb.Language language = 2;
   */
  language = Language.UNSPECIFIED;

  /**
   * @generated from field: string file_path = 3;
   */
  filePath = "";

  /**
   * Line to insert the generated code into.
   *
   * @generated from field: int32 line_number = 4;
   */
  lineNumber = 0;

  constructor(data?: PartialMessage<IntentGenerateCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.IntentGenerateCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instruction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "enum", T: proto3.getEnumType(Language) },
    { no: 3, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentGenerateCode {
    return new IntentGenerateCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentGenerateCode {
    return new IntentGenerateCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentGenerateCode {
    return new IntentGenerateCode().fromJsonString(jsonString, options);
  }

  static equals(a: IntentGenerateCode | PlainMessage<IntentGenerateCode> | undefined, b: IntentGenerateCode | PlainMessage<IntentGenerateCode> | undefined): boolean {
    return proto3.util.equals(IntentGenerateCode, a, b);
  }
}

/**
 * Intents are messages from the user to a bot. They can be a naive text message (ie. generic),
 * a more structured intented action (ie. explain), or a response to an ChatMessageAction.
 *
 * @generated from message exa.chat_pb.ChatMessageIntent
 */
export class ChatMessageIntent extends Message<ChatMessageIntent> {
  /**
   * @generated from oneof exa.chat_pb.ChatMessageIntent.intent
   */
  intent: {
    /**
     * @generated from field: exa.chat_pb.IntentGeneric generic = 1;
     */
    value: IntentGeneric;
    case: "generic";
  } | {
    /**
     * @generated from field: exa.chat_pb.IntentFunctionExplain explain_function = 2;
     */
    value: IntentFunctionExplain;
    case: "explainFunction";
  } | {
    /**
     * @generated from field: exa.chat_pb.IntentFunctionDocstring function_docstring = 3;
     */
    value: IntentFunctionDocstring;
    case: "functionDocstring";
  } | {
    /**
     * @generated from field: exa.chat_pb.IntentFunctionRefactor function_refactor = 4;
     */
    value: IntentFunctionRefactor;
    case: "functionRefactor";
  } | {
    /**
     * @generated from field: exa.chat_pb.IntentCodeBlockExplain explain_code_block = 5;
     */
    value: IntentCodeBlockExplain;
    case: "explainCodeBlock";
  } | {
    /**
     * @generated from field: exa.chat_pb.IntentCodeBlockRefactor code_block_refactor = 6;
     */
    value: IntentCodeBlockRefactor;
    case: "codeBlockRefactor";
  } | {
    /**
     * @generated from field: exa.chat_pb.IntentFunctionUnitTests function_unit_tests = 7;
     */
    value: IntentFunctionUnitTests;
    case: "functionUnitTests";
  } | {
    /**
     * @generated from field: exa.chat_pb.IntentProblemExplain problem_explain = 8;
     */
    value: IntentProblemExplain;
    case: "problemExplain";
  } | {
    /**
     * @generated from field: exa.chat_pb.IntentGenerateCode generate_code = 9;
     */
    value: IntentGenerateCode;
    case: "generateCode";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ChatMessageIntent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.ChatMessageIntent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "generic", kind: "message", T: IntentGeneric, oneof: "intent" },
    { no: 2, name: "explain_function", kind: "message", T: IntentFunctionExplain, oneof: "intent" },
    { no: 3, name: "function_docstring", kind: "message", T: IntentFunctionDocstring, oneof: "intent" },
    { no: 4, name: "function_refactor", kind: "message", T: IntentFunctionRefactor, oneof: "intent" },
    { no: 5, name: "explain_code_block", kind: "message", T: IntentCodeBlockExplain, oneof: "intent" },
    { no: 6, name: "code_block_refactor", kind: "message", T: IntentCodeBlockRefactor, oneof: "intent" },
    { no: 7, name: "function_unit_tests", kind: "message", T: IntentFunctionUnitTests, oneof: "intent" },
    { no: 8, name: "problem_explain", kind: "message", T: IntentProblemExplain, oneof: "intent" },
    { no: 9, name: "generate_code", kind: "message", T: IntentGenerateCode, oneof: "intent" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessageIntent {
    return new ChatMessageIntent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessageIntent {
    return new ChatMessageIntent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessageIntent {
    return new ChatMessageIntent().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessageIntent | PlainMessage<ChatMessageIntent> | undefined, b: ChatMessageIntent | PlainMessage<ChatMessageIntent> | undefined): boolean {
    return proto3.util.equals(ChatMessageIntent, a, b);
  }
}

/**
 * An edit action that the bot will apply to a code block.
 *
 * @generated from message exa.chat_pb.ChatMessageActionEdit
 */
export class ChatMessageActionEdit extends Message<ChatMessageActionEdit> {
  /**
   * Metadata to inform where the edit should be applied.
   *
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * The diff that should be applied on the file.
   *
   * @generated from field: exa.diff_action_pb.DiffBlock diff = 2;
   */
  diff?: DiffBlock;

  /**
   * Additional metadata about the edit action.
   *
   * TODO: Deprecate this in favor of diff-level language.
   *
   * @generated from field: exa.codeium_common_pb.Language language = 3;
   */
  language = Language.UNSPECIFIED;

  /**
   * Generic text to pass along with the edit (ie. an explanation). Text can be either before or
   * after the diff. This primarily impacts rendering.
   *
   * @generated from field: string text_pre = 4;
   */
  textPre = "";

  /**
   * @generated from field: string text_post = 5;
   */
  textPost = "";

  constructor(data?: PartialMessage<ChatMessageActionEdit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.ChatMessageActionEdit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "diff", kind: "message", T: DiffBlock },
    { no: 3, name: "language", kind: "enum", T: proto3.getEnumType(Language) },
    { no: 4, name: "text_pre", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "text_post", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessageActionEdit {
    return new ChatMessageActionEdit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessageActionEdit {
    return new ChatMessageActionEdit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessageActionEdit {
    return new ChatMessageActionEdit().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessageActionEdit | PlainMessage<ChatMessageActionEdit> | undefined, b: ChatMessageActionEdit | PlainMessage<ChatMessageActionEdit> | undefined): boolean {
    return proto3.util.equals(ChatMessageActionEdit, a, b);
  }
}

/**
 * A generic text response from the bot to the user with no structured data.
 *
 * @generated from message exa.chat_pb.ChatMessageActionGeneric
 */
export class ChatMessageActionGeneric extends Message<ChatMessageActionGeneric> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<ChatMessageActionGeneric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.ChatMessageActionGeneric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessageActionGeneric {
    return new ChatMessageActionGeneric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessageActionGeneric {
    return new ChatMessageActionGeneric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessageActionGeneric {
    return new ChatMessageActionGeneric().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessageActionGeneric | PlainMessage<ChatMessageActionGeneric> | undefined, b: ChatMessageActionGeneric | PlainMessage<ChatMessageActionGeneric> | undefined): boolean {
    return proto3.util.equals(ChatMessageActionGeneric, a, b);
  }
}

/**
 * @generated from message exa.chat_pb.ChatMessageStatusContextRelevancy
 */
export class ChatMessageStatusContextRelevancy extends Message<ChatMessageStatusContextRelevancy> {
  /**
   * @generated from field: bool is_loading = 1;
   */
  isLoading = false;

  /**
   * @generated from field: bool is_relevant = 2;
   */
  isRelevant = false;

  /**
   * @generated from field: repeated string query_suggestions = 3;
   */
  querySuggestions: string[] = [];

  constructor(data?: PartialMessage<ChatMessageStatusContextRelevancy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.ChatMessageStatusContextRelevancy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_loading", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "is_relevant", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "query_suggestions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessageStatusContextRelevancy {
    return new ChatMessageStatusContextRelevancy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessageStatusContextRelevancy {
    return new ChatMessageStatusContextRelevancy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessageStatusContextRelevancy {
    return new ChatMessageStatusContextRelevancy().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessageStatusContextRelevancy | PlainMessage<ChatMessageStatusContextRelevancy> | undefined, b: ChatMessageStatusContextRelevancy | PlainMessage<ChatMessageStatusContextRelevancy> | undefined): boolean {
    return proto3.util.equals(ChatMessageStatusContextRelevancy, a, b);
  }
}

/**
 * A status response from the bot to the user. These are transient messages that do not contain
 * information that will be persisted.
 *
 * @generated from message exa.chat_pb.ChatMessageStatus
 */
export class ChatMessageStatus extends Message<ChatMessageStatus> {
  /**
   * @generated from oneof exa.chat_pb.ChatMessageStatus.status
   */
  status: {
    /**
     * @generated from field: exa.chat_pb.ChatMessageStatusContextRelevancy context_relevancy = 1;
     */
    value: ChatMessageStatusContextRelevancy;
    case: "contextRelevancy";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ChatMessageStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.ChatMessageStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context_relevancy", kind: "message", T: ChatMessageStatusContextRelevancy, oneof: "status" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessageStatus {
    return new ChatMessageStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessageStatus {
    return new ChatMessageStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessageStatus {
    return new ChatMessageStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessageStatus | PlainMessage<ChatMessageStatus> | undefined, b: ChatMessageStatus | PlainMessage<ChatMessageStatus> | undefined): boolean {
    return proto3.util.equals(ChatMessageStatus, a, b);
  }
}

/**
 * A generic error response from the bot to the user.
 *
 * @generated from message exa.chat_pb.ChatMessageError
 */
export class ChatMessageError extends Message<ChatMessageError> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<ChatMessageError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.ChatMessageError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessageError {
    return new ChatMessageError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessageError {
    return new ChatMessageError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessageError {
    return new ChatMessageError().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessageError | PlainMessage<ChatMessageError> | undefined, b: ChatMessageError | PlainMessage<ChatMessageError> | undefined): boolean {
    return proto3.util.equals(ChatMessageError, a, b);
  }
}

/**
 * Actions are responses by the bot to the user.
 *
 * @generated from message exa.chat_pb.ChatMessageAction
 */
export class ChatMessageAction extends Message<ChatMessageAction> {
  /**
   * @generated from oneof exa.chat_pb.ChatMessageAction.action
   */
  action: {
    /**
     * @generated from field: exa.chat_pb.ChatMessageActionGeneric generic = 1;
     */
    value: ChatMessageActionGeneric;
    case: "generic";
  } | {
    /**
     * @generated from field: exa.chat_pb.ChatMessageActionEdit edit = 3;
     */
    value: ChatMessageActionEdit;
    case: "edit";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: uint32 num_tokens = 2;
   */
  numTokens = 0;

  /**
   * @generated from field: repeated exa.codeium_common_pb.CodeContextItem context_items = 4;
   */
  contextItems: CodeContextItem[] = [];

  constructor(data?: PartialMessage<ChatMessageAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.ChatMessageAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "generic", kind: "message", T: ChatMessageActionGeneric, oneof: "action" },
    { no: 3, name: "edit", kind: "message", T: ChatMessageActionEdit, oneof: "action" },
    { no: 2, name: "num_tokens", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "context_items", kind: "message", T: CodeContextItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessageAction {
    return new ChatMessageAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessageAction {
    return new ChatMessageAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessageAction {
    return new ChatMessageAction().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessageAction | PlainMessage<ChatMessageAction> | undefined, b: ChatMessageAction | PlainMessage<ChatMessageAction> | undefined): boolean {
    return proto3.util.equals(ChatMessageAction, a, b);
  }
}

/**
 * Main ChatMessage proto that will house all important information about a message.
 *
 * @generated from message exa.chat_pb.ChatMessage
 */
export class ChatMessage extends Message<ChatMessage> {
  /**
   * UID for each chat message.
   *
   * @generated from field: string message_id = 1;
   */
  messageId = "";

  /**
   * Where the message came from (ie. user, bot, system, etc.)
   *
   * @generated from field: exa.codeium_common_pb.ChatMessageSource source = 2;
   */
  source = ChatMessageSource.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * UID for the conversation the message came from. This indiciates
   * the history that was sent to the server.
   *
   * @generated from field: string conversation_id = 4;
   */
  conversationId = "";

  /**
   * @generated from oneof exa.chat_pb.ChatMessage.content
   */
  content: {
    /**
     * @generated from field: exa.chat_pb.ChatMessageIntent intent = 5;
     */
    value: ChatMessageIntent;
    case: "intent";
  } | {
    /**
     * @generated from field: exa.chat_pb.ChatMessageAction action = 6;
     */
    value: ChatMessageAction;
    case: "action";
  } | {
    /**
     * @generated from field: exa.chat_pb.ChatMessageError error = 7;
     */
    value: ChatMessageError;
    case: "error";
  } | {
    /**
     * @generated from field: exa.chat_pb.ChatMessageStatus status = 8;
     */
    value: ChatMessageStatus;
    case: "status";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Whether or not the message is still being streamed out.
   *
   * @generated from field: bool in_progress = 9;
   */
  inProgress = false;

  constructor(data?: PartialMessage<ChatMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "exa.chat_pb.ChatMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source", kind: "enum", T: proto3.getEnumType(ChatMessageSource) },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
    { no: 4, name: "conversation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "intent", kind: "message", T: ChatMessageIntent, oneof: "content" },
    { no: 6, name: "action", kind: "message", T: ChatMessageAction, oneof: "content" },
    { no: 7, name: "error", kind: "message", T: ChatMessageError, oneof: "content" },
    { no: 8, name: "status", kind: "message", T: ChatMessageStatus, oneof: "content" },
    { no: 9, name: "in_progress", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessage {
    return new ChatMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessage {
    return new ChatMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessage {
    return new ChatMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessage | PlainMessage<ChatMessage> | undefined, b: ChatMessage | PlainMessage<ChatMessage> | undefined): boolean {
    return proto3.util.equals(ChatMessage, a, b);
  }
}

